
/* 
  JS中内存分为堆内存和栈内存
    - 堆内存：存储引用类型的值（对象：键值对， 函数：代码字符串）
    - 栈内存：提供代码运行的环境和存储基本类型值
  
  堆内存释放
    - 让所有引用堆内存空间地址的变量赋值为null即可（没有变量占用这个堆内存浏览器会自动释放）
  
  栈内存释放
    一般情况下，当函数执行完成，所形成的私有作用域（栈内存）都会自动释放掉。在栈内存中存储的值也会释放掉，但也有特殊不销毁的情况
      1. 函数执行完成，当前形成的栈内存中，某些内容被栈内存以外的变量占用，此时栈内存不能被释放
      2. 全局栈内存只有在页面关闭的时候才会被释放掉

      如果当前栈内存没有被释放，之前在栈内存中存储的基本值也不会被释放，能够一直保存
  
  var f = fn()  // 获取fn的返回结果
  f() // 执行返回结果
  fn()() // 获取fn返回结果，再次执行返回结果

  ++i  /  i++ 的区别是在和其他值进行运算的时候

*/

var k = 1
console.log(5+(++k)+(k++)+ 4 + (k--) + (++k) + 3 + (--k) + (k++)) // 26
// 5 + 2 + 2 + 4 + 3 + 3 + 3 + 2 + 2
// 2 3 2 3 2 



var i = 1
function fn(i) {
  return function(n) {
    console.log(n + (++i));
  }
}
var f = fn(2) // i = 2
f(3) // 3 + 3 = 6 // 3
fn(5)(6) // 12
fn(7)(8) // 16
f(4) // 8