var a = 12
var b = a
b = 13
console.info(a)

var arr = [1, 2]
var arr2 = arr
arr2.push(3)
console.info(arr)

function sum() {
  return 10
}

/* 
  window全局作用域
    代码自上而下执行
    var a = 12
    1. 先声明变量a，没有赋值（默认是undefined）
    2. 在当前作用域中开辟一个位置存储12这个值
    3. 让变量a 和 12关联在一起（赋值）
    
    var b = a
    1. 把A存储的值放在一个新的位置上，让新位置上的值和B保持关联，此时B和A没有关系

    var arr = [1, 2]
    对象会新开辟一个内存空间，有一个16进制地址

    var arr2 = arr
    arr2的指针，指向arr的空间

  
  函数私有作用域
    function sum(){}
    - 函数也会开辟一个内存空间，通过指针指向空间，空间内的数据是 代码字符串
    - 函数每次执行，会形成 私有作用域： 把之前创建函数时存储的字符串代码执行


  - 栈内存，作用域
    1. 提供一个JS代码自上而下执行的环境（代码都是在栈中执行的）
    2. 基本数据类型比较简单，他们都是直接在栈内存中开辟一个位置，把值直接存储进去
    - `当栈内存被销毁，存储的那些基本值也都跟着被销毁了`
    
  - 堆内存，存对象的内存空间
    1. 储存引用类型值的（对象：键值对   函数：代码字符串）
    - `当前堆内存释放销毁，那么这个引用值彻底没了`
    - 堆内存释放：当堆内存没有被任何的变量或者其他东西所占用，浏览器会在空间的时候，自主的进行内存回收，把所有不被占用的堆内存销毁掉
    - arr = null 通过空对象指针null 可以让原始变量谁都不指向
*/